{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","wordList","pages","hidden","handleChange","bind","setCards","event","this","setState","target","value","packedList","paginated","wordListArray","match","length","alert","push","splice","console","log","type","num","className","id","method","action","onChange","placeholder","name","rows","class","onClick","href","title","map","cards","k","key","card","j","word","i","getInfo","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAkGeA,G,wDA9Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,SAAU,GAAIC,MAAO,GAAIC,OAAQ,UAChD,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAJC,E,yDAMNE,GACXC,KAAKC,SAAS,CAAER,SAAUM,EAAMG,OAAOC,U,iCAGvC,IAAIC,EAAa,GACbC,EAAY,GACVC,EAAgBN,KAAKR,MAAMC,SAASc,MAAM,QAChD,GAAID,GAAiBA,EAAcE,OAAS,IAAM,EAMhD,OALAC,MACE,OACEH,EAAcE,OACd,iEAEG,EAET,KAAOF,EAAcE,OAAS,GAC5BJ,EAAWM,KAAKJ,EAAcK,OAAO,EAAG,IAE1C,KAAOP,EAAWI,OAAS,GACzBH,EAAUK,KAAKN,EAAWO,OAAO,EAAG,IAEtCX,KAAKC,SAAS,CAAEP,MAAOW,IACvBL,KAAKC,SAAS,CAAEN,OAAQ,KACxBiB,QAAQC,IAAIR,K,8BAENS,EAAMC,GAEZ,MADiB,CAAC,OAAQ,SAAU,MAAO,QAAS,UAClCA,K,+BAEV,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,SACb,0BAAMC,GAAG,QAAQC,OAAO,MAAMC,OAAO,IACnC,yBAAKF,GAAG,UAAR,2DAGA,8BACEG,SAAUpB,KAAKJ,aACfyB,YAAY,sFACZJ,GAAG,OACHK,KAAK,OACLC,KAAK,OAGT,yBAAKC,MAAM,iBAAiBC,QAASzB,KAAKF,UACxC,uBAAG0B,MAAM,oBAAoBE,KAAK,IAAIC,MAAM,qBAGhD,yBAAKX,UAAW,cAAgBhB,KAAKR,MAAMG,QACxCK,KAAKR,MAAME,MAAMkC,KAAI,SAACC,EAAOC,GAC5B,OACE,yBAAKd,UAAU,OAAOe,IAAKD,GACxBD,EAAMD,KAAI,SAACI,EAAMC,GAChB,OACE,yBAAKjB,UAAU,OAAOe,IAAKE,GACxBD,EAAKJ,KAAI,SAACM,EAAMC,GACf,OACE,yBAAKnB,UAAU,OAAOe,IAAKI,GACzB,yBACEnB,UAAW,UAAY,EAAKoB,QAAQ,QAASD,IAE5CA,EAAI,GAEP,yBACEnB,UACE,YACA,EAAKoB,QAAQ,SAAUD,GACvB,WAGDD,qB,GA9EbG,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlC,MACvB,2DCZNmC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.701a8d07.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { wordList: \"\", pages: [], hidden: \"hidden\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.setCards = this.setCards.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ wordList: event.target.value });\n  }\n  setCards() {\n    let packedList = [];\n    let paginated = [];\n    const wordListArray = this.state.wordList.match(/\\w+/g);\n    if (wordListArray && wordListArray.length % 5 !== 0) {\n      alert(\n        \"hay \" +\n          wordListArray.length +\n          \" palabras, ingresa un número de palabras múltiplo de 5\"\n      );\n      return false;\n    }\n    while (wordListArray.length > 0) {\n      packedList.push(wordListArray.splice(0, 5));\n    }\n    while (packedList.length > 0) {\n      paginated.push(packedList.splice(0, 9));\n    }\n    this.setState({ pages: paginated });\n    this.setState({ hidden: \"\" });\n    console.log(paginated);\n  }\n  getInfo(type, num) {\n    let colourList = [\"blue\", \"purple\", \"red\", \"green\", \"yellow\"];\n    return colourList[num];\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"setup\">\n          <form id=\"paper\" method=\"get\" action=\"\">\n            <div id=\"margin\">\n              Ingresa un listado de palabras para generar las cartas:\n            </div>\n            <textarea\n              onChange={this.handleChange}\n              placeholder=\"Anota acá el listado de palabras separadas por espacios, comas o saltos de linea\"\n              id=\"text\"\n              name=\"text\"\n              rows=\"4\"\n            ></textarea>\n          </form>\n          <div class=\"button-wrapper\" onClick={this.setCards}>\n            <a class=\"background-button\" href=\"#\" title=\"Generar Cartas\"></a>\n          </div>\n        </div>\n        <div className={\"print-area \" + this.state.hidden}>\n          {this.state.pages.map((cards, k) => {\n            return (\n              <div className=\"page\" key={k}>\n                {cards.map((card, j) => {\n                  return (\n                    <div className=\"card\" key={j}>\n                      {card.map((word, i) => {\n                        return (\n                          <div className=\"line\" key={i}>\n                            <div\n                              className={\"number \" + this.getInfo(\"color\", i)}\n                            >\n                              {i + 1}\n                            </div>\n                            <div\n                              className={\n                                \"text-box \" +\n                                this.getInfo(\"border\", i) +\n                                \"-border\"\n                              }\n                            >\n                              {word}\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}